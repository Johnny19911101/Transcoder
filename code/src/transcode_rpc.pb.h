// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transcode_rpc.proto

#ifndef PROTOBUF_transcode_5frpc_2eproto__INCLUDED
#define PROTOBUF_transcode_5frpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_transcode_5frpc_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPIDSImpl();
void InitDefaultsPIDS();
void InitDefaultsavio_typeImpl();
void InitDefaultsavio_type();
void InitDefaultsStateReplyImpl();
void InitDefaultsStateReply();
void InitDefaultschannel_listImpl();
void InitDefaultschannel_list();
void InitDefaultsemptyImpl();
void InitDefaultsempty();
inline void InitDefaults() {
  InitDefaultsPIDS();
  InitDefaultsavio_type();
  InitDefaultsStateReply();
  InitDefaultschannel_list();
  InitDefaultsempty();
}
}  // namespace protobuf_transcode_5frpc_2eproto
namespace transcode_rpc {
class PIDS;
class PIDSDefaultTypeInternal;
extern PIDSDefaultTypeInternal _PIDS_default_instance_;
class StateReply;
class StateReplyDefaultTypeInternal;
extern StateReplyDefaultTypeInternal _StateReply_default_instance_;
class avio_type;
class avio_typeDefaultTypeInternal;
extern avio_typeDefaultTypeInternal _avio_type_default_instance_;
class channel_list;
class channel_listDefaultTypeInternal;
extern channel_listDefaultTypeInternal _channel_list_default_instance_;
class empty;
class emptyDefaultTypeInternal;
extern emptyDefaultTypeInternal _empty_default_instance_;
}  // namespace transcode_rpc
namespace transcode_rpc {

// ===================================================================

class PIDS : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transcode_rpc.PIDS) */ {
 public:
  PIDS();
  virtual ~PIDS();

  PIDS(const PIDS& from);

  inline PIDS& operator=(const PIDS& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PIDS(PIDS&& from) noexcept
    : PIDS() {
    *this = ::std::move(from);
  }

  inline PIDS& operator=(PIDS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PIDS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PIDS* internal_default_instance() {
    return reinterpret_cast<const PIDS*>(
               &_PIDS_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PIDS* other);
  friend void swap(PIDS& a, PIDS& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PIDS* New() const PROTOBUF_FINAL { return New(NULL); }

  PIDS* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PIDS& from);
  void MergeFrom(const PIDS& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PIDS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string filename = 3;
  void clear_filename();
  static const int kFilenameFieldNumber = 3;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // int32 video = 1;
  void clear_video();
  static const int kVideoFieldNumber = 1;
  ::google::protobuf::int32 video() const;
  void set_video(::google::protobuf::int32 value);

  // int32 audio = 2;
  void clear_audio();
  static const int kAudioFieldNumber = 2;
  ::google::protobuf::int32 audio() const;
  void set_audio(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transcode_rpc.PIDS)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  ::google::protobuf::int32 video_;
  ::google::protobuf::int32 audio_;
  mutable int _cached_size_;
  friend struct ::protobuf_transcode_5frpc_2eproto::TableStruct;
  friend void ::protobuf_transcode_5frpc_2eproto::InitDefaultsPIDSImpl();
};
// -------------------------------------------------------------------

class avio_type : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transcode_rpc.avio_type) */ {
 public:
  avio_type();
  virtual ~avio_type();

  avio_type(const avio_type& from);

  inline avio_type& operator=(const avio_type& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  avio_type(avio_type&& from) noexcept
    : avio_type() {
    *this = ::std::move(from);
  }

  inline avio_type& operator=(avio_type&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const avio_type& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const avio_type* internal_default_instance() {
    return reinterpret_cast<const avio_type*>(
               &_avio_type_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(avio_type* other);
  friend void swap(avio_type& a, avio_type& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline avio_type* New() const PROTOBUF_FINAL { return New(NULL); }

  avio_type* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const avio_type& from);
  void MergeFrom(const avio_type& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(avio_type* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string file = 2;
  void clear_file();
  static const int kFileFieldNumber = 2;
  const ::std::string& file() const;
  void set_file(const ::std::string& value);
  #if LANG_CXX11
  void set_file(::std::string&& value);
  #endif
  void set_file(const char* value);
  void set_file(const char* value, size_t size);
  ::std::string* mutable_file();
  ::std::string* release_file();
  void set_allocated_file(::std::string* file);

  // int32 inputtype = 1;
  void clear_inputtype();
  static const int kInputtypeFieldNumber = 1;
  ::google::protobuf::int32 inputtype() const;
  void set_inputtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:transcode_rpc.avio_type)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_;
  ::google::protobuf::int32 inputtype_;
  mutable int _cached_size_;
  friend struct ::protobuf_transcode_5frpc_2eproto::TableStruct;
  friend void ::protobuf_transcode_5frpc_2eproto::InitDefaultsavio_typeImpl();
};
// -------------------------------------------------------------------

class StateReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transcode_rpc.StateReply) */ {
 public:
  StateReply();
  virtual ~StateReply();

  StateReply(const StateReply& from);

  inline StateReply& operator=(const StateReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StateReply(StateReply&& from) noexcept
    : StateReply() {
    *this = ::std::move(from);
  }

  inline StateReply& operator=(StateReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StateReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StateReply* internal_default_instance() {
    return reinterpret_cast<const StateReply*>(
               &_StateReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(StateReply* other);
  friend void swap(StateReply& a, StateReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StateReply* New() const PROTOBUF_FINAL { return New(NULL); }

  StateReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StateReply& from);
  void MergeFrom(const StateReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StateReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string reply = 1;
  void clear_reply();
  static const int kReplyFieldNumber = 1;
  const ::std::string& reply() const;
  void set_reply(const ::std::string& value);
  #if LANG_CXX11
  void set_reply(::std::string&& value);
  #endif
  void set_reply(const char* value);
  void set_reply(const char* value, size_t size);
  ::std::string* mutable_reply();
  ::std::string* release_reply();
  void set_allocated_reply(::std::string* reply);

  // @@protoc_insertion_point(class_scope:transcode_rpc.StateReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr reply_;
  mutable int _cached_size_;
  friend struct ::protobuf_transcode_5frpc_2eproto::TableStruct;
  friend void ::protobuf_transcode_5frpc_2eproto::InitDefaultsStateReplyImpl();
};
// -------------------------------------------------------------------

class channel_list : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transcode_rpc.channel_list) */ {
 public:
  channel_list();
  virtual ~channel_list();

  channel_list(const channel_list& from);

  inline channel_list& operator=(const channel_list& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  channel_list(channel_list&& from) noexcept
    : channel_list() {
    *this = ::std::move(from);
  }

  inline channel_list& operator=(channel_list&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const channel_list& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const channel_list* internal_default_instance() {
    return reinterpret_cast<const channel_list*>(
               &_channel_list_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(channel_list* other);
  friend void swap(channel_list& a, channel_list& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline channel_list* New() const PROTOBUF_FINAL { return New(NULL); }

  channel_list* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const channel_list& from);
  void MergeFrom(const channel_list& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(channel_list* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string list = 1;
  void clear_list();
  static const int kListFieldNumber = 1;
  const ::std::string& list() const;
  void set_list(const ::std::string& value);
  #if LANG_CXX11
  void set_list(::std::string&& value);
  #endif
  void set_list(const char* value);
  void set_list(const char* value, size_t size);
  ::std::string* mutable_list();
  ::std::string* release_list();
  void set_allocated_list(::std::string* list);

  // @@protoc_insertion_point(class_scope:transcode_rpc.channel_list)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr list_;
  mutable int _cached_size_;
  friend struct ::protobuf_transcode_5frpc_2eproto::TableStruct;
  friend void ::protobuf_transcode_5frpc_2eproto::InitDefaultschannel_listImpl();
};
// -------------------------------------------------------------------

class empty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transcode_rpc.empty) */ {
 public:
  empty();
  virtual ~empty();

  empty(const empty& from);

  inline empty& operator=(const empty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  empty(empty&& from) noexcept
    : empty() {
    *this = ::std::move(from);
  }

  inline empty& operator=(empty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const empty* internal_default_instance() {
    return reinterpret_cast<const empty*>(
               &_empty_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(empty* other);
  friend void swap(empty& a, empty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline empty* New() const PROTOBUF_FINAL { return New(NULL); }

  empty* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const empty& from);
  void MergeFrom(const empty& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(empty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:transcode_rpc.empty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_transcode_5frpc_2eproto::TableStruct;
  friend void ::protobuf_transcode_5frpc_2eproto::InitDefaultsemptyImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PIDS

// int32 video = 1;
inline void PIDS::clear_video() {
  video_ = 0;
}
inline ::google::protobuf::int32 PIDS::video() const {
  // @@protoc_insertion_point(field_get:transcode_rpc.PIDS.video)
  return video_;
}
inline void PIDS::set_video(::google::protobuf::int32 value) {
  
  video_ = value;
  // @@protoc_insertion_point(field_set:transcode_rpc.PIDS.video)
}

// int32 audio = 2;
inline void PIDS::clear_audio() {
  audio_ = 0;
}
inline ::google::protobuf::int32 PIDS::audio() const {
  // @@protoc_insertion_point(field_get:transcode_rpc.PIDS.audio)
  return audio_;
}
inline void PIDS::set_audio(::google::protobuf::int32 value) {
  
  audio_ = value;
  // @@protoc_insertion_point(field_set:transcode_rpc.PIDS.audio)
}

// string filename = 3;
inline void PIDS::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PIDS::filename() const {
  // @@protoc_insertion_point(field_get:transcode_rpc.PIDS.filename)
  return filename_.GetNoArena();
}
inline void PIDS::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transcode_rpc.PIDS.filename)
}
#if LANG_CXX11
inline void PIDS::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transcode_rpc.PIDS.filename)
}
#endif
inline void PIDS::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transcode_rpc.PIDS.filename)
}
inline void PIDS::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transcode_rpc.PIDS.filename)
}
inline ::std::string* PIDS::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:transcode_rpc.PIDS.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PIDS::release_filename() {
  // @@protoc_insertion_point(field_release:transcode_rpc.PIDS.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PIDS::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:transcode_rpc.PIDS.filename)
}

// -------------------------------------------------------------------

// avio_type

// int32 inputtype = 1;
inline void avio_type::clear_inputtype() {
  inputtype_ = 0;
}
inline ::google::protobuf::int32 avio_type::inputtype() const {
  // @@protoc_insertion_point(field_get:transcode_rpc.avio_type.inputtype)
  return inputtype_;
}
inline void avio_type::set_inputtype(::google::protobuf::int32 value) {
  
  inputtype_ = value;
  // @@protoc_insertion_point(field_set:transcode_rpc.avio_type.inputtype)
}

// string file = 2;
inline void avio_type::clear_file() {
  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& avio_type::file() const {
  // @@protoc_insertion_point(field_get:transcode_rpc.avio_type.file)
  return file_.GetNoArena();
}
inline void avio_type::set_file(const ::std::string& value) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transcode_rpc.avio_type.file)
}
#if LANG_CXX11
inline void avio_type::set_file(::std::string&& value) {
  
  file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transcode_rpc.avio_type.file)
}
#endif
inline void avio_type::set_file(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transcode_rpc.avio_type.file)
}
inline void avio_type::set_file(const char* value, size_t size) {
  
  file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transcode_rpc.avio_type.file)
}
inline ::std::string* avio_type::mutable_file() {
  
  // @@protoc_insertion_point(field_mutable:transcode_rpc.avio_type.file)
  return file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* avio_type::release_file() {
  // @@protoc_insertion_point(field_release:transcode_rpc.avio_type.file)
  
  return file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void avio_type::set_allocated_file(::std::string* file) {
  if (file != NULL) {
    
  } else {
    
  }
  file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file);
  // @@protoc_insertion_point(field_set_allocated:transcode_rpc.avio_type.file)
}

// -------------------------------------------------------------------

// StateReply

// string reply = 1;
inline void StateReply::clear_reply() {
  reply_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StateReply::reply() const {
  // @@protoc_insertion_point(field_get:transcode_rpc.StateReply.reply)
  return reply_.GetNoArena();
}
inline void StateReply::set_reply(const ::std::string& value) {
  
  reply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transcode_rpc.StateReply.reply)
}
#if LANG_CXX11
inline void StateReply::set_reply(::std::string&& value) {
  
  reply_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transcode_rpc.StateReply.reply)
}
#endif
inline void StateReply::set_reply(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transcode_rpc.StateReply.reply)
}
inline void StateReply::set_reply(const char* value, size_t size) {
  
  reply_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transcode_rpc.StateReply.reply)
}
inline ::std::string* StateReply::mutable_reply() {
  
  // @@protoc_insertion_point(field_mutable:transcode_rpc.StateReply.reply)
  return reply_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StateReply::release_reply() {
  // @@protoc_insertion_point(field_release:transcode_rpc.StateReply.reply)
  
  return reply_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StateReply::set_allocated_reply(::std::string* reply) {
  if (reply != NULL) {
    
  } else {
    
  }
  reply_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reply);
  // @@protoc_insertion_point(field_set_allocated:transcode_rpc.StateReply.reply)
}

// -------------------------------------------------------------------

// channel_list

// string list = 1;
inline void channel_list::clear_list() {
  list_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& channel_list::list() const {
  // @@protoc_insertion_point(field_get:transcode_rpc.channel_list.list)
  return list_.GetNoArena();
}
inline void channel_list::set_list(const ::std::string& value) {
  
  list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:transcode_rpc.channel_list.list)
}
#if LANG_CXX11
inline void channel_list::set_list(::std::string&& value) {
  
  list_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:transcode_rpc.channel_list.list)
}
#endif
inline void channel_list::set_list(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:transcode_rpc.channel_list.list)
}
inline void channel_list::set_list(const char* value, size_t size) {
  
  list_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:transcode_rpc.channel_list.list)
}
inline ::std::string* channel_list::mutable_list() {
  
  // @@protoc_insertion_point(field_mutable:transcode_rpc.channel_list.list)
  return list_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* channel_list::release_list() {
  // @@protoc_insertion_point(field_release:transcode_rpc.channel_list.list)
  
  return list_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void channel_list::set_allocated_list(::std::string* list) {
  if (list != NULL) {
    
  } else {
    
  }
  list_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), list);
  // @@protoc_insertion_point(field_set_allocated:transcode_rpc.channel_list.list)
}

// -------------------------------------------------------------------

// empty

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace transcode_rpc

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_transcode_5frpc_2eproto__INCLUDED
