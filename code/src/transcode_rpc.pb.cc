// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transcode_rpc.proto

#include "transcode_rpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace transcode_rpc {
class PIDSDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PIDS>
      _instance;
} _PIDS_default_instance_;
class avio_typeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<avio_type>
      _instance;
} _avio_type_default_instance_;
class StateReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StateReply>
      _instance;
} _StateReply_default_instance_;
class channel_listDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<channel_list>
      _instance;
} _channel_list_default_instance_;
class emptyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<empty>
      _instance;
} _empty_default_instance_;
}  // namespace transcode_rpc
namespace protobuf_transcode_5frpc_2eproto {
void InitDefaultsPIDSImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::transcode_rpc::_PIDS_default_instance_;
    new (ptr) ::transcode_rpc::PIDS();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transcode_rpc::PIDS::InitAsDefaultInstance();
}

void InitDefaultsPIDS() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPIDSImpl);
}

void InitDefaultsavio_typeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::transcode_rpc::_avio_type_default_instance_;
    new (ptr) ::transcode_rpc::avio_type();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transcode_rpc::avio_type::InitAsDefaultInstance();
}

void InitDefaultsavio_type() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsavio_typeImpl);
}

void InitDefaultsStateReplyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::transcode_rpc::_StateReply_default_instance_;
    new (ptr) ::transcode_rpc::StateReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transcode_rpc::StateReply::InitAsDefaultInstance();
}

void InitDefaultsStateReply() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStateReplyImpl);
}

void InitDefaultschannel_listImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::transcode_rpc::_channel_list_default_instance_;
    new (ptr) ::transcode_rpc::channel_list();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transcode_rpc::channel_list::InitAsDefaultInstance();
}

void InitDefaultschannel_list() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultschannel_listImpl);
}

void InitDefaultsemptyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::transcode_rpc::_empty_default_instance_;
    new (ptr) ::transcode_rpc::empty();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::transcode_rpc::empty::InitAsDefaultInstance();
}

void InitDefaultsempty() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsemptyImpl);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transcode_rpc::PIDS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transcode_rpc::PIDS, video_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transcode_rpc::PIDS, audio_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transcode_rpc::PIDS, filename_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transcode_rpc::avio_type, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transcode_rpc::avio_type, inputtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transcode_rpc::avio_type, file_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transcode_rpc::StateReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transcode_rpc::StateReply, reply_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transcode_rpc::StateReply, error_code_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transcode_rpc::channel_list, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transcode_rpc::channel_list, list_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::transcode_rpc::empty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::transcode_rpc::PIDS)},
  { 8, -1, sizeof(::transcode_rpc::avio_type)},
  { 15, -1, sizeof(::transcode_rpc::StateReply)},
  { 22, -1, sizeof(::transcode_rpc::channel_list)},
  { 28, -1, sizeof(::transcode_rpc::empty)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::transcode_rpc::_PIDS_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::transcode_rpc::_avio_type_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::transcode_rpc::_StateReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::transcode_rpc::_channel_list_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::transcode_rpc::_empty_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "transcode_rpc.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023transcode_rpc.proto\022\rtranscode_rpc\"6\n\004"
      "PIDS\022\r\n\005video\030\001 \001(\005\022\r\n\005audio\030\002 \001(\005\022\020\n\010fi"
      "lename\030\003 \001(\t\",\n\tavio_type\022\021\n\tinputtype\030\001"
      " \001(\005\022\014\n\004file\030\002 \001(\t\"/\n\nStateReply\022\r\n\005repl"
      "y\030\001 \001(\t\022\022\n\nerror_code\030\002 \001(\005\"\034\n\014channel_l"
      "ist\022\014\n\004list\030\001 \001(\t\"\007\n\005empty2\301\002\n\tTranscode"
      "\022@\n\nsetchannel\022\023.transcode_rpc.PIDS\032\033.tr"
      "anscode_rpc.channel_list\"\000\022=\n\004avio\022\030.tra"
      "nscode_rpc.avio_type\032\031.transcode_rpc.Sta"
      "teReply\"\000\022<\n\007process\022\024.transcode_rpc.emp"
      "ty\032\031.transcode_rpc.StateReply\"\000\022:\n\005state"
      "\022\024.transcode_rpc.empty\032\031.transcode_rpc.S"
      "tateReply\"\000\0229\n\004stop\022\024.transcode_rpc.empt"
      "y\032\031.transcode_rpc.StateReply\"\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 558);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "transcode_rpc.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_transcode_5frpc_2eproto
namespace transcode_rpc {

// ===================================================================

void PIDS::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PIDS::kVideoFieldNumber;
const int PIDS::kAudioFieldNumber;
const int PIDS::kFilenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PIDS::PIDS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_transcode_5frpc_2eproto::InitDefaultsPIDS();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:transcode_rpc.PIDS)
}
PIDS::PIDS(const PIDS& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filename().size() > 0) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  ::memcpy(&video_, &from.video_,
    static_cast<size_t>(reinterpret_cast<char*>(&audio_) -
    reinterpret_cast<char*>(&video_)) + sizeof(audio_));
  // @@protoc_insertion_point(copy_constructor:transcode_rpc.PIDS)
}

void PIDS::SharedCtor() {
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&video_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&audio_) -
      reinterpret_cast<char*>(&video_)) + sizeof(audio_));
  _cached_size_ = 0;
}

PIDS::~PIDS() {
  // @@protoc_insertion_point(destructor:transcode_rpc.PIDS)
  SharedDtor();
}

void PIDS::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PIDS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PIDS::descriptor() {
  ::protobuf_transcode_5frpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transcode_5frpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PIDS& PIDS::default_instance() {
  ::protobuf_transcode_5frpc_2eproto::InitDefaultsPIDS();
  return *internal_default_instance();
}

PIDS* PIDS::New(::google::protobuf::Arena* arena) const {
  PIDS* n = new PIDS;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PIDS::Clear() {
// @@protoc_insertion_point(message_clear_start:transcode_rpc.PIDS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&video_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&audio_) -
      reinterpret_cast<char*>(&video_)) + sizeof(audio_));
  _internal_metadata_.Clear();
}

bool PIDS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transcode_rpc.PIDS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 video = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &video_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 audio = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &audio_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string filename = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transcode_rpc.PIDS.filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transcode_rpc.PIDS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transcode_rpc.PIDS)
  return false;
#undef DO_
}

void PIDS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transcode_rpc.PIDS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 video = 1;
  if (this->video() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->video(), output);
  }

  // int32 audio = 2;
  if (this->audio() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->audio(), output);
  }

  // string filename = 3;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcode_rpc.PIDS.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->filename(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:transcode_rpc.PIDS)
}

::google::protobuf::uint8* PIDS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transcode_rpc.PIDS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 video = 1;
  if (this->video() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->video(), target);
  }

  // int32 audio = 2;
  if (this->audio() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->audio(), target);
  }

  // string filename = 3;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcode_rpc.PIDS.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filename(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transcode_rpc.PIDS)
  return target;
}

size_t PIDS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transcode_rpc.PIDS)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string filename = 3;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  // int32 video = 1;
  if (this->video() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->video());
  }

  // int32 audio = 2;
  if (this->audio() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->audio());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PIDS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transcode_rpc.PIDS)
  GOOGLE_DCHECK_NE(&from, this);
  const PIDS* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PIDS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transcode_rpc.PIDS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transcode_rpc.PIDS)
    MergeFrom(*source);
  }
}

void PIDS::MergeFrom(const PIDS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transcode_rpc.PIDS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.video() != 0) {
    set_video(from.video());
  }
  if (from.audio() != 0) {
    set_audio(from.audio());
  }
}

void PIDS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transcode_rpc.PIDS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PIDS::CopyFrom(const PIDS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transcode_rpc.PIDS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PIDS::IsInitialized() const {
  return true;
}

void PIDS::Swap(PIDS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PIDS::InternalSwap(PIDS* other) {
  using std::swap;
  filename_.Swap(&other->filename_);
  swap(video_, other->video_);
  swap(audio_, other->audio_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PIDS::GetMetadata() const {
  protobuf_transcode_5frpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transcode_5frpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void avio_type::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int avio_type::kInputtypeFieldNumber;
const int avio_type::kFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

avio_type::avio_type()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_transcode_5frpc_2eproto::InitDefaultsavio_type();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:transcode_rpc.avio_type)
}
avio_type::avio_type(const avio_type& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file().size() > 0) {
    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  inputtype_ = from.inputtype_;
  // @@protoc_insertion_point(copy_constructor:transcode_rpc.avio_type)
}

void avio_type::SharedCtor() {
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inputtype_ = 0;
  _cached_size_ = 0;
}

avio_type::~avio_type() {
  // @@protoc_insertion_point(destructor:transcode_rpc.avio_type)
  SharedDtor();
}

void avio_type::SharedDtor() {
  file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void avio_type::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* avio_type::descriptor() {
  ::protobuf_transcode_5frpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transcode_5frpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const avio_type& avio_type::default_instance() {
  ::protobuf_transcode_5frpc_2eproto::InitDefaultsavio_type();
  return *internal_default_instance();
}

avio_type* avio_type::New(::google::protobuf::Arena* arena) const {
  avio_type* n = new avio_type;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void avio_type::Clear() {
// @@protoc_insertion_point(message_clear_start:transcode_rpc.avio_type)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  inputtype_ = 0;
  _internal_metadata_.Clear();
}

bool avio_type::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transcode_rpc.avio_type)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 inputtype = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inputtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string file = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file().data(), static_cast<int>(this->file().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transcode_rpc.avio_type.file"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transcode_rpc.avio_type)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transcode_rpc.avio_type)
  return false;
#undef DO_
}

void avio_type::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transcode_rpc.avio_type)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 inputtype = 1;
  if (this->inputtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->inputtype(), output);
  }

  // string file = 2;
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file().data(), static_cast<int>(this->file().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcode_rpc.avio_type.file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:transcode_rpc.avio_type)
}

::google::protobuf::uint8* avio_type::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transcode_rpc.avio_type)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 inputtype = 1;
  if (this->inputtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->inputtype(), target);
  }

  // string file = 2;
  if (this->file().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file().data(), static_cast<int>(this->file().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcode_rpc.avio_type.file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->file(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transcode_rpc.avio_type)
  return target;
}

size_t avio_type::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transcode_rpc.avio_type)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string file = 2;
  if (this->file().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file());
  }

  // int32 inputtype = 1;
  if (this->inputtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->inputtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void avio_type::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transcode_rpc.avio_type)
  GOOGLE_DCHECK_NE(&from, this);
  const avio_type* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const avio_type>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transcode_rpc.avio_type)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transcode_rpc.avio_type)
    MergeFrom(*source);
  }
}

void avio_type::MergeFrom(const avio_type& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transcode_rpc.avio_type)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file().size() > 0) {

    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  if (from.inputtype() != 0) {
    set_inputtype(from.inputtype());
  }
}

void avio_type::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transcode_rpc.avio_type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void avio_type::CopyFrom(const avio_type& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transcode_rpc.avio_type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool avio_type::IsInitialized() const {
  return true;
}

void avio_type::Swap(avio_type* other) {
  if (other == this) return;
  InternalSwap(other);
}
void avio_type::InternalSwap(avio_type* other) {
  using std::swap;
  file_.Swap(&other->file_);
  swap(inputtype_, other->inputtype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata avio_type::GetMetadata() const {
  protobuf_transcode_5frpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transcode_5frpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StateReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StateReply::kReplyFieldNumber;
const int StateReply::kErrorCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StateReply::StateReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_transcode_5frpc_2eproto::InitDefaultsStateReply();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:transcode_rpc.StateReply)
}
StateReply::StateReply(const StateReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reply_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reply().size() > 0) {
    reply_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reply_);
  }
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:transcode_rpc.StateReply)
}

void StateReply::SharedCtor() {
  reply_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_code_ = 0;
  _cached_size_ = 0;
}

StateReply::~StateReply() {
  // @@protoc_insertion_point(destructor:transcode_rpc.StateReply)
  SharedDtor();
}

void StateReply::SharedDtor() {
  reply_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StateReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StateReply::descriptor() {
  ::protobuf_transcode_5frpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transcode_5frpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StateReply& StateReply::default_instance() {
  ::protobuf_transcode_5frpc_2eproto::InitDefaultsStateReply();
  return *internal_default_instance();
}

StateReply* StateReply::New(::google::protobuf::Arena* arena) const {
  StateReply* n = new StateReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StateReply::Clear() {
// @@protoc_insertion_point(message_clear_start:transcode_rpc.StateReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reply_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_code_ = 0;
  _internal_metadata_.Clear();
}

bool StateReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transcode_rpc.StateReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string reply = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reply()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reply().data(), static_cast<int>(this->reply().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transcode_rpc.StateReply.reply"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 error_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transcode_rpc.StateReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transcode_rpc.StateReply)
  return false;
#undef DO_
}

void StateReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transcode_rpc.StateReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reply = 1;
  if (this->reply().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reply().data(), static_cast<int>(this->reply().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcode_rpc.StateReply.reply");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->reply(), output);
  }

  // int32 error_code = 2;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->error_code(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:transcode_rpc.StateReply)
}

::google::protobuf::uint8* StateReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transcode_rpc.StateReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reply = 1;
  if (this->reply().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reply().data(), static_cast<int>(this->reply().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcode_rpc.StateReply.reply");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reply(), target);
  }

  // int32 error_code = 2;
  if (this->error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->error_code(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transcode_rpc.StateReply)
  return target;
}

size_t StateReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transcode_rpc.StateReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string reply = 1;
  if (this->reply().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reply());
  }

  // int32 error_code = 2;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transcode_rpc.StateReply)
  GOOGLE_DCHECK_NE(&from, this);
  const StateReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StateReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transcode_rpc.StateReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transcode_rpc.StateReply)
    MergeFrom(*source);
  }
}

void StateReply::MergeFrom(const StateReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transcode_rpc.StateReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reply().size() > 0) {

    reply_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reply_);
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
}

void StateReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transcode_rpc.StateReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateReply::CopyFrom(const StateReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transcode_rpc.StateReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateReply::IsInitialized() const {
  return true;
}

void StateReply::Swap(StateReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StateReply::InternalSwap(StateReply* other) {
  using std::swap;
  reply_.Swap(&other->reply_);
  swap(error_code_, other->error_code_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StateReply::GetMetadata() const {
  protobuf_transcode_5frpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transcode_5frpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void channel_list::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int channel_list::kListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

channel_list::channel_list()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_transcode_5frpc_2eproto::InitDefaultschannel_list();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:transcode_rpc.channel_list)
}
channel_list::channel_list(const channel_list& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  list_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.list().size() > 0) {
    list_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.list_);
  }
  // @@protoc_insertion_point(copy_constructor:transcode_rpc.channel_list)
}

void channel_list::SharedCtor() {
  list_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

channel_list::~channel_list() {
  // @@protoc_insertion_point(destructor:transcode_rpc.channel_list)
  SharedDtor();
}

void channel_list::SharedDtor() {
  list_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void channel_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* channel_list::descriptor() {
  ::protobuf_transcode_5frpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transcode_5frpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const channel_list& channel_list::default_instance() {
  ::protobuf_transcode_5frpc_2eproto::InitDefaultschannel_list();
  return *internal_default_instance();
}

channel_list* channel_list::New(::google::protobuf::Arena* arena) const {
  channel_list* n = new channel_list;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void channel_list::Clear() {
// @@protoc_insertion_point(message_clear_start:transcode_rpc.channel_list)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool channel_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transcode_rpc.channel_list)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string list = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_list()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->list().data(), static_cast<int>(this->list().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "transcode_rpc.channel_list.list"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:transcode_rpc.channel_list)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transcode_rpc.channel_list)
  return false;
#undef DO_
}

void channel_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transcode_rpc.channel_list)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string list = 1;
  if (this->list().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->list().data(), static_cast<int>(this->list().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcode_rpc.channel_list.list");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->list(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:transcode_rpc.channel_list)
}

::google::protobuf::uint8* channel_list::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transcode_rpc.channel_list)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string list = 1;
  if (this->list().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->list().data(), static_cast<int>(this->list().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "transcode_rpc.channel_list.list");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->list(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transcode_rpc.channel_list)
  return target;
}

size_t channel_list::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transcode_rpc.channel_list)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string list = 1;
  if (this->list().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->list());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void channel_list::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transcode_rpc.channel_list)
  GOOGLE_DCHECK_NE(&from, this);
  const channel_list* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const channel_list>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transcode_rpc.channel_list)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transcode_rpc.channel_list)
    MergeFrom(*source);
  }
}

void channel_list::MergeFrom(const channel_list& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transcode_rpc.channel_list)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.list().size() > 0) {

    list_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.list_);
  }
}

void channel_list::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transcode_rpc.channel_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void channel_list::CopyFrom(const channel_list& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transcode_rpc.channel_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool channel_list::IsInitialized() const {
  return true;
}

void channel_list::Swap(channel_list* other) {
  if (other == this) return;
  InternalSwap(other);
}
void channel_list::InternalSwap(channel_list* other) {
  using std::swap;
  list_.Swap(&other->list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata channel_list::GetMetadata() const {
  protobuf_transcode_5frpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transcode_5frpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void empty::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

empty::empty()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_transcode_5frpc_2eproto::InitDefaultsempty();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:transcode_rpc.empty)
}
empty::empty(const empty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:transcode_rpc.empty)
}

void empty::SharedCtor() {
  _cached_size_ = 0;
}

empty::~empty() {
  // @@protoc_insertion_point(destructor:transcode_rpc.empty)
  SharedDtor();
}

void empty::SharedDtor() {
}

void empty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* empty::descriptor() {
  ::protobuf_transcode_5frpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transcode_5frpc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const empty& empty::default_instance() {
  ::protobuf_transcode_5frpc_2eproto::InitDefaultsempty();
  return *internal_default_instance();
}

empty* empty::New(::google::protobuf::Arena* arena) const {
  empty* n = new empty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void empty::Clear() {
// @@protoc_insertion_point(message_clear_start:transcode_rpc.empty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool empty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:transcode_rpc.empty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:transcode_rpc.empty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:transcode_rpc.empty)
  return false;
#undef DO_
}

void empty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:transcode_rpc.empty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:transcode_rpc.empty)
}

::google::protobuf::uint8* empty::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:transcode_rpc.empty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transcode_rpc.empty)
  return target;
}

size_t empty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transcode_rpc.empty)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void empty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transcode_rpc.empty)
  GOOGLE_DCHECK_NE(&from, this);
  const empty* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const empty>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transcode_rpc.empty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transcode_rpc.empty)
    MergeFrom(*source);
  }
}

void empty::MergeFrom(const empty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transcode_rpc.empty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void empty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transcode_rpc.empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void empty::CopyFrom(const empty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transcode_rpc.empty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool empty::IsInitialized() const {
  return true;
}

void empty::Swap(empty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void empty::InternalSwap(empty* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata empty::GetMetadata() const {
  protobuf_transcode_5frpc_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_transcode_5frpc_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace transcode_rpc

// @@protoc_insertion_point(global_scope)
