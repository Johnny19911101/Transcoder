// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: transcode_rpc.proto

#include "transcode_rpc.pb.h"
#include "transcode_rpc.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace transcode_rpc {

static const char* Transcode_method_names[] = {
  "/transcode_rpc.Transcode/Setchannel",
  "/transcode_rpc.Transcode/Avio",
  "/transcode_rpc.Transcode/Process",
  "/transcode_rpc.Transcode/State",
  "/transcode_rpc.Transcode/Stop",
};

std::unique_ptr< Transcode::Stub> Transcode::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Transcode::Stub> stub(new Transcode::Stub(channel));
  return stub;
}

Transcode::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Setchannel_(Transcode_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Avio_(Transcode_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Process_(Transcode_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_State_(Transcode_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Stop_(Transcode_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Transcode::Stub::Setchannel(::grpc::ClientContext* context, const ::transcode_rpc::PIDS& request, ::transcode_rpc::channel_list* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Setchannel_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::transcode_rpc::channel_list>* Transcode::Stub::AsyncSetchannelRaw(::grpc::ClientContext* context, const ::transcode_rpc::PIDS& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::transcode_rpc::channel_list>::Create(channel_.get(), cq, rpcmethod_Setchannel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::transcode_rpc::channel_list>* Transcode::Stub::PrepareAsyncSetchannelRaw(::grpc::ClientContext* context, const ::transcode_rpc::PIDS& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::transcode_rpc::channel_list>::Create(channel_.get(), cq, rpcmethod_Setchannel_, context, request, false);
}

::grpc::Status Transcode::Stub::Avio(::grpc::ClientContext* context, const ::transcode_rpc::avio_type& request, ::transcode_rpc::StateReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Avio_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::transcode_rpc::StateReply>* Transcode::Stub::AsyncAvioRaw(::grpc::ClientContext* context, const ::transcode_rpc::avio_type& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::transcode_rpc::StateReply>::Create(channel_.get(), cq, rpcmethod_Avio_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::transcode_rpc::StateReply>* Transcode::Stub::PrepareAsyncAvioRaw(::grpc::ClientContext* context, const ::transcode_rpc::avio_type& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::transcode_rpc::StateReply>::Create(channel_.get(), cq, rpcmethod_Avio_, context, request, false);
}

::grpc::Status Transcode::Stub::Process(::grpc::ClientContext* context, const ::transcode_rpc::empty& request, ::transcode_rpc::StateReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Process_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::transcode_rpc::StateReply>* Transcode::Stub::AsyncProcessRaw(::grpc::ClientContext* context, const ::transcode_rpc::empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::transcode_rpc::StateReply>::Create(channel_.get(), cq, rpcmethod_Process_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::transcode_rpc::StateReply>* Transcode::Stub::PrepareAsyncProcessRaw(::grpc::ClientContext* context, const ::transcode_rpc::empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::transcode_rpc::StateReply>::Create(channel_.get(), cq, rpcmethod_Process_, context, request, false);
}

::grpc::Status Transcode::Stub::State(::grpc::ClientContext* context, const ::transcode_rpc::empty& request, ::transcode_rpc::StateReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_State_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::transcode_rpc::StateReply>* Transcode::Stub::AsyncStateRaw(::grpc::ClientContext* context, const ::transcode_rpc::empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::transcode_rpc::StateReply>::Create(channel_.get(), cq, rpcmethod_State_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::transcode_rpc::StateReply>* Transcode::Stub::PrepareAsyncStateRaw(::grpc::ClientContext* context, const ::transcode_rpc::empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::transcode_rpc::StateReply>::Create(channel_.get(), cq, rpcmethod_State_, context, request, false);
}

::grpc::Status Transcode::Stub::Stop(::grpc::ClientContext* context, const ::transcode_rpc::empty& request, ::transcode_rpc::StateReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Stop_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::transcode_rpc::StateReply>* Transcode::Stub::AsyncStopRaw(::grpc::ClientContext* context, const ::transcode_rpc::empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::transcode_rpc::StateReply>::Create(channel_.get(), cq, rpcmethod_Stop_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::transcode_rpc::StateReply>* Transcode::Stub::PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::transcode_rpc::empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::transcode_rpc::StateReply>::Create(channel_.get(), cq, rpcmethod_Stop_, context, request, false);
}

Transcode::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Transcode_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Transcode::Service, ::transcode_rpc::PIDS, ::transcode_rpc::channel_list>(
          std::mem_fn(&Transcode::Service::Setchannel), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Transcode_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Transcode::Service, ::transcode_rpc::avio_type, ::transcode_rpc::StateReply>(
          std::mem_fn(&Transcode::Service::Avio), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Transcode_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Transcode::Service, ::transcode_rpc::empty, ::transcode_rpc::StateReply>(
          std::mem_fn(&Transcode::Service::Process), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Transcode_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Transcode::Service, ::transcode_rpc::empty, ::transcode_rpc::StateReply>(
          std::mem_fn(&Transcode::Service::State), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Transcode_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Transcode::Service, ::transcode_rpc::empty, ::transcode_rpc::StateReply>(
          std::mem_fn(&Transcode::Service::Stop), this)));
}

Transcode::Service::~Service() {
}

::grpc::Status Transcode::Service::Setchannel(::grpc::ServerContext* context, const ::transcode_rpc::PIDS* request, ::transcode_rpc::channel_list* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Transcode::Service::Avio(::grpc::ServerContext* context, const ::transcode_rpc::avio_type* request, ::transcode_rpc::StateReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Transcode::Service::Process(::grpc::ServerContext* context, const ::transcode_rpc::empty* request, ::transcode_rpc::StateReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Transcode::Service::State(::grpc::ServerContext* context, const ::transcode_rpc::empty* request, ::transcode_rpc::StateReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Transcode::Service::Stop(::grpc::ServerContext* context, const ::transcode_rpc::empty* request, ::transcode_rpc::StateReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace transcode_rpc

