// Code generated by protoc-gen-go. DO NOT EDIT.
// source: transcode_rpc.proto

/*
Package transcode_rpc is a generated protocol buffer package.

It is generated from these files:
	transcode_rpc.proto

It has these top-level messages:
	PIDS
	AvioType
	StateReply
	ChannelList
	Empty
*/
package transcode_rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PIDS struct {
	Video    int32  `protobuf:"varint,1,opt,name=video" json:"video,omitempty"`
	Audio    int32  `protobuf:"varint,2,opt,name=audio" json:"audio,omitempty"`
	Filename string `protobuf:"bytes,3,opt,name=filename" json:"filename,omitempty"`
}

func (m *PIDS) Reset()                    { *m = PIDS{} }
func (m *PIDS) String() string            { return proto.CompactTextString(m) }
func (*PIDS) ProtoMessage()               {}
func (*PIDS) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PIDS) GetVideo() int32 {
	if m != nil {
		return m.Video
	}
	return 0
}

func (m *PIDS) GetAudio() int32 {
	if m != nil {
		return m.Audio
	}
	return 0
}

func (m *PIDS) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

type AvioType struct {
	Inputtype int32  `protobuf:"varint,1,opt,name=inputtype" json:"inputtype,omitempty"`
	File      string `protobuf:"bytes,2,opt,name=file" json:"file,omitempty"`
}

func (m *AvioType) Reset()                    { *m = AvioType{} }
func (m *AvioType) String() string            { return proto.CompactTextString(m) }
func (*AvioType) ProtoMessage()               {}
func (*AvioType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AvioType) GetInputtype() int32 {
	if m != nil {
		return m.Inputtype
	}
	return 0
}

func (m *AvioType) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

// The response message containing the greetings
type StateReply struct {
	Reply     string `protobuf:"bytes,1,opt,name=reply" json:"reply,omitempty"`
	ErrorCode int32  `protobuf:"varint,2,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
}

func (m *StateReply) Reset()                    { *m = StateReply{} }
func (m *StateReply) String() string            { return proto.CompactTextString(m) }
func (*StateReply) ProtoMessage()               {}
func (*StateReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StateReply) GetReply() string {
	if m != nil {
		return m.Reply
	}
	return ""
}

func (m *StateReply) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

type ChannelList struct {
	List string `protobuf:"bytes,1,opt,name=list" json:"list,omitempty"`
}

func (m *ChannelList) Reset()                    { *m = ChannelList{} }
func (m *ChannelList) String() string            { return proto.CompactTextString(m) }
func (*ChannelList) ProtoMessage()               {}
func (*ChannelList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ChannelList) GetList() string {
	if m != nil {
		return m.List
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto.RegisterType((*PIDS)(nil), "transcode_rpc.PIDS")
	proto.RegisterType((*AvioType)(nil), "transcode_rpc.avio_type")
	proto.RegisterType((*StateReply)(nil), "transcode_rpc.StateReply")
	proto.RegisterType((*ChannelList)(nil), "transcode_rpc.channel_list")
	proto.RegisterType((*Empty)(nil), "transcode_rpc.empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Transcode service

type TranscodeClient interface {
	Setchannel(ctx context.Context, in *PIDS, opts ...grpc.CallOption) (*ChannelList, error)
	Avio(ctx context.Context, in *AvioType, opts ...grpc.CallOption) (*StateReply, error)
	Process(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StateReply, error)
	State(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StateReply, error)
	Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StateReply, error)
}

type transcodeClient struct {
	cc *grpc.ClientConn
}

func NewTranscodeClient(cc *grpc.ClientConn) TranscodeClient {
	return &transcodeClient{cc}
}

func (c *transcodeClient) Setchannel(ctx context.Context, in *PIDS, opts ...grpc.CallOption) (*ChannelList, error) {
	out := new(ChannelList)
	err := grpc.Invoke(ctx, "/transcode_rpc.Transcode/setchannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transcodeClient) Avio(ctx context.Context, in *AvioType, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := grpc.Invoke(ctx, "/transcode_rpc.Transcode/avio", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transcodeClient) Process(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := grpc.Invoke(ctx, "/transcode_rpc.Transcode/process", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transcodeClient) State(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := grpc.Invoke(ctx, "/transcode_rpc.Transcode/state", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transcodeClient) Stop(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StateReply, error) {
	out := new(StateReply)
	err := grpc.Invoke(ctx, "/transcode_rpc.Transcode/stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Transcode service

type TranscodeServer interface {
	Setchannel(context.Context, *PIDS) (*ChannelList, error)
	Avio(context.Context, *AvioType) (*StateReply, error)
	Process(context.Context, *Empty) (*StateReply, error)
	State(context.Context, *Empty) (*StateReply, error)
	Stop(context.Context, *Empty) (*StateReply, error)
}

func RegisterTranscodeServer(s *grpc.Server, srv TranscodeServer) {
	s.RegisterService(&_Transcode_serviceDesc, srv)
}

func _Transcode_Setchannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PIDS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscodeServer).Setchannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transcode_rpc.Transcode/Setchannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscodeServer).Setchannel(ctx, req.(*PIDS))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transcode_Avio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvioType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscodeServer).Avio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transcode_rpc.Transcode/Avio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscodeServer).Avio(ctx, req.(*AvioType))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transcode_Process_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscodeServer).Process(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transcode_rpc.Transcode/Process",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscodeServer).Process(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transcode_State_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscodeServer).State(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transcode_rpc.Transcode/State",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscodeServer).State(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transcode_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscodeServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transcode_rpc.Transcode/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscodeServer).Stop(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Transcode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "transcode_rpc.Transcode",
	HandlerType: (*TranscodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "setchannel",
			Handler:    _Transcode_Setchannel_Handler,
		},
		{
			MethodName: "avio",
			Handler:    _Transcode_Avio_Handler,
		},
		{
			MethodName: "process",
			Handler:    _Transcode_Process_Handler,
		},
		{
			MethodName: "state",
			Handler:    _Transcode_State_Handler,
		},
		{
			MethodName: "stop",
			Handler:    _Transcode_Stop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transcode_rpc.proto",
}

func init() { proto.RegisterFile("transcode_rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 305 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x6d, 0x4b, 0x42, 0xf1, 0x09, 0x96, 0x6b, 0x87, 0x50, 0x40, 0xaa, 0x3c, 0x75, 0xea, 0x00,
	0x13, 0x88, 0x4a, 0x20, 0x58, 0x58, 0x10, 0x4a, 0xd9, 0x23, 0x93, 0x1c, 0xc2, 0x52, 0x1a, 0x5b,
	0xb6, 0x5b, 0x29, 0x9f, 0xc7, 0x9f, 0x21, 0x3b, 0xa1, 0xa5, 0x19, 0x18, 0x3a, 0xe5, 0xde, 0xcb,
	0xbd, 0xbb, 0x7b, 0x4f, 0x86, 0x91, 0x33, 0xa2, 0xb2, 0xb9, 0x2a, 0x28, 0x33, 0x3a, 0x9f, 0x6b,
	0xa3, 0x9c, 0xc2, 0xb3, 0x3d, 0x92, 0xbf, 0x42, 0xf4, 0xf6, 0xf2, 0xbc, 0xc4, 0x31, 0xc4, 0x1b,
	0x59, 0x90, 0x4a, 0xfa, 0xd3, 0xfe, 0x2c, 0x4e, 0x1b, 0xe0, 0x59, 0xb1, 0x2e, 0xa4, 0x4a, 0x06,
	0x0d, 0x1b, 0x00, 0x4e, 0xe0, 0xe4, 0x53, 0x96, 0x54, 0x89, 0x15, 0x25, 0x47, 0xd3, 0xfe, 0x8c,
	0xa5, 0x5b, 0xcc, 0x17, 0xc0, 0xc4, 0x46, 0xaa, 0xcc, 0xd5, 0x9a, 0xf0, 0x12, 0x98, 0xac, 0xf4,
	0xda, 0x79, 0xd0, 0x0e, 0xde, 0x11, 0x88, 0x10, 0x79, 0x59, 0x98, 0xcd, 0xd2, 0x50, 0xf3, 0x47,
	0x80, 0xa5, 0x13, 0x8e, 0x52, 0xd2, 0x65, 0xed, 0xd7, 0x1b, 0x5f, 0x04, 0x2d, 0x4b, 0x1b, 0x80,
	0x57, 0x00, 0x64, 0x8c, 0x32, 0x99, 0x37, 0xd1, 0x5e, 0xc6, 0x02, 0xf3, 0xa4, 0x0a, 0xe2, 0x1c,
	0x4e, 0xf3, 0x2f, 0x51, 0x55, 0x54, 0x66, 0xa5, 0xb4, 0xce, 0xaf, 0xf1, 0xdf, 0x76, 0x46, 0xa8,
	0xf9, 0x10, 0x62, 0x5a, 0x69, 0x57, 0x5f, 0x7f, 0x0f, 0x80, 0xbd, 0xff, 0x06, 0x82, 0x0f, 0x00,
	0x96, 0x5c, 0xab, 0xc6, 0xd1, 0x7c, 0x3f, 0x3f, 0x9f, 0xd3, 0xe4, 0xa2, 0x43, 0xfe, 0x5d, 0xc5,
	0x7b, 0xb8, 0x80, 0xc8, 0xdb, 0xc7, 0xa4, 0xd3, 0xb6, 0xcd, 0x64, 0x72, 0xde, 0xf9, 0xb3, 0xb3,
	0xcb, 0x7b, 0x78, 0x0f, 0x43, 0x6d, 0x54, 0x4e, 0xd6, 0xe2, 0xb8, 0xd3, 0x17, 0xee, 0xfd, 0x5f,
	0x7d, 0x07, 0xb1, 0xf5, 0xf8, 0x10, 0xed, 0x2d, 0x44, 0xd6, 0x29, 0x7d, 0x80, 0xf4, 0xe3, 0x38,
	0x3c, 0xac, 0x9b, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xed, 0x0e, 0x2b, 0x6d, 0x6f, 0x02, 0x00,
	0x00,
}
